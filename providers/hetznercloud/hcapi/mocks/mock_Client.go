// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	hcapi "go.woodpecker-ci.org/autoscaler/providers/hetznercloud/hcapi"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Firewall provides a mock function with given fields:
func (_m *MockClient) Firewall() hcapi.FirewallClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Firewall")
	}

	var r0 hcapi.FirewallClient
	if rf, ok := ret.Get(0).(func() hcapi.FirewallClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.FirewallClient)
		}
	}

	return r0
}

// MockClient_Firewall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Firewall'
type MockClient_Firewall_Call struct {
	*mock.Call
}

// Firewall is a helper method to define mock.On call
func (_e *MockClient_Expecter) Firewall() *MockClient_Firewall_Call {
	return &MockClient_Firewall_Call{Call: _e.mock.On("Firewall")}
}

func (_c *MockClient_Firewall_Call) Run(run func()) *MockClient_Firewall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Firewall_Call) Return(_a0 hcapi.FirewallClient) *MockClient_Firewall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Firewall_Call) RunAndReturn(run func() hcapi.FirewallClient) *MockClient_Firewall_Call {
	_c.Call.Return(run)
	return _c
}

// Image provides a mock function with given fields:
func (_m *MockClient) Image() hcapi.ImageClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Image")
	}

	var r0 hcapi.ImageClient
	if rf, ok := ret.Get(0).(func() hcapi.ImageClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.ImageClient)
		}
	}

	return r0
}

// MockClient_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type MockClient_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
func (_e *MockClient_Expecter) Image() *MockClient_Image_Call {
	return &MockClient_Image_Call{Call: _e.mock.On("Image")}
}

func (_c *MockClient_Image_Call) Run(run func()) *MockClient_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Image_Call) Return(_a0 hcapi.ImageClient) *MockClient_Image_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Image_Call) RunAndReturn(run func() hcapi.ImageClient) *MockClient_Image_Call {
	_c.Call.Return(run)
	return _c
}

// Network provides a mock function with given fields:
func (_m *MockClient) Network() hcapi.NetworkClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Network")
	}

	var r0 hcapi.NetworkClient
	if rf, ok := ret.Get(0).(func() hcapi.NetworkClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.NetworkClient)
		}
	}

	return r0
}

// MockClient_Network_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Network'
type MockClient_Network_Call struct {
	*mock.Call
}

// Network is a helper method to define mock.On call
func (_e *MockClient_Expecter) Network() *MockClient_Network_Call {
	return &MockClient_Network_Call{Call: _e.mock.On("Network")}
}

func (_c *MockClient_Network_Call) Run(run func()) *MockClient_Network_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Network_Call) Return(_a0 hcapi.NetworkClient) *MockClient_Network_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Network_Call) RunAndReturn(run func() hcapi.NetworkClient) *MockClient_Network_Call {
	_c.Call.Return(run)
	return _c
}

// SSHKey provides a mock function with given fields:
func (_m *MockClient) SSHKey() hcapi.SSHKeyClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SSHKey")
	}

	var r0 hcapi.SSHKeyClient
	if rf, ok := ret.Get(0).(func() hcapi.SSHKeyClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.SSHKeyClient)
		}
	}

	return r0
}

// MockClient_SSHKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSHKey'
type MockClient_SSHKey_Call struct {
	*mock.Call
}

// SSHKey is a helper method to define mock.On call
func (_e *MockClient_Expecter) SSHKey() *MockClient_SSHKey_Call {
	return &MockClient_SSHKey_Call{Call: _e.mock.On("SSHKey")}
}

func (_c *MockClient_SSHKey_Call) Run(run func()) *MockClient_SSHKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_SSHKey_Call) Return(_a0 hcapi.SSHKeyClient) *MockClient_SSHKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SSHKey_Call) RunAndReturn(run func() hcapi.SSHKeyClient) *MockClient_SSHKey_Call {
	_c.Call.Return(run)
	return _c
}

// Server provides a mock function with given fields:
func (_m *MockClient) Server() hcapi.ServerClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Server")
	}

	var r0 hcapi.ServerClient
	if rf, ok := ret.Get(0).(func() hcapi.ServerClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.ServerClient)
		}
	}

	return r0
}

// MockClient_Server_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Server'
type MockClient_Server_Call struct {
	*mock.Call
}

// Server is a helper method to define mock.On call
func (_e *MockClient_Expecter) Server() *MockClient_Server_Call {
	return &MockClient_Server_Call{Call: _e.mock.On("Server")}
}

func (_c *MockClient_Server_Call) Run(run func()) *MockClient_Server_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Server_Call) Return(_a0 hcapi.ServerClient) *MockClient_Server_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Server_Call) RunAndReturn(run func() hcapi.ServerClient) *MockClient_Server_Call {
	_c.Call.Return(run)
	return _c
}

// ServerType provides a mock function with given fields:
func (_m *MockClient) ServerType() hcapi.ServerTypeClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerType")
	}

	var r0 hcapi.ServerTypeClient
	if rf, ok := ret.Get(0).(func() hcapi.ServerTypeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hcapi.ServerTypeClient)
		}
	}

	return r0
}

// MockClient_ServerType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerType'
type MockClient_ServerType_Call struct {
	*mock.Call
}

// ServerType is a helper method to define mock.On call
func (_e *MockClient_Expecter) ServerType() *MockClient_ServerType_Call {
	return &MockClient_ServerType_Call{Call: _e.mock.On("ServerType")}
}

func (_c *MockClient_ServerType_Call) Run(run func()) *MockClient_ServerType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ServerType_Call) Return(_a0 hcapi.ServerTypeClient) *MockClient_ServerType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ServerType_Call) RunAndReturn(run func() hcapi.ServerTypeClient) *MockClient_ServerType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

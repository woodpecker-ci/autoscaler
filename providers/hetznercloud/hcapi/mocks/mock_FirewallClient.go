// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"

	mock "github.com/stretchr/testify/mock"
)

// MockFirewallClient is an autogenerated mock type for the FirewallClient type
type MockFirewallClient struct {
	mock.Mock
}

type MockFirewallClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFirewallClient) EXPECT() *MockFirewallClient_Expecter {
	return &MockFirewallClient_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx
func (_m *MockFirewallClient) All(ctx context.Context) ([]*hcloud.Firewall, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*hcloud.Firewall
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*hcloud.Firewall, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*hcloud.Firewall); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirewallClient_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockFirewallClient_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFirewallClient_Expecter) All(ctx interface{}) *MockFirewallClient_All_Call {
	return &MockFirewallClient_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockFirewallClient_All_Call) Run(run func(ctx context.Context)) *MockFirewallClient_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFirewallClient_All_Call) Return(_a0 []*hcloud.Firewall, _a1 error) *MockFirewallClient_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFirewallClient_All_Call) RunAndReturn(run func(context.Context) ([]*hcloud.Firewall, error)) *MockFirewallClient_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithOpts provides a mock function with given fields: ctx, opts
func (_m *MockFirewallClient) AllWithOpts(ctx context.Context, opts hcloud.FirewallListOpts) ([]*hcloud.Firewall, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AllWithOpts")
	}

	var r0 []*hcloud.Firewall
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallListOpts) ([]*hcloud.Firewall, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallListOpts) []*hcloud.Firewall); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.FirewallListOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirewallClient_AllWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithOpts'
type MockFirewallClient_AllWithOpts_Call struct {
	*mock.Call
}

// AllWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.FirewallListOpts
func (_e *MockFirewallClient_Expecter) AllWithOpts(ctx interface{}, opts interface{}) *MockFirewallClient_AllWithOpts_Call {
	return &MockFirewallClient_AllWithOpts_Call{Call: _e.mock.On("AllWithOpts", ctx, opts)}
}

func (_c *MockFirewallClient_AllWithOpts_Call) Run(run func(ctx context.Context, opts hcloud.FirewallListOpts)) *MockFirewallClient_AllWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.FirewallListOpts))
	})
	return _c
}

func (_c *MockFirewallClient_AllWithOpts_Call) Return(_a0 []*hcloud.Firewall, _a1 error) *MockFirewallClient_AllWithOpts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFirewallClient_AllWithOpts_Call) RunAndReturn(run func(context.Context, hcloud.FirewallListOpts) ([]*hcloud.Firewall, error)) *MockFirewallClient_AllWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyResources provides a mock function with given fields: ctx, firewall, resources
func (_m *MockFirewallClient) ApplyResources(ctx context.Context, firewall *hcloud.Firewall, resources []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, firewall, resources)

	if len(ret) == 0 {
		panic("no return value specified for ApplyResources")
	}

	var r0 []*hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, firewall, resources)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) []*hcloud.Action); ok {
		r0 = rf(ctx, firewall, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) *hcloud.Response); ok {
		r1 = rf(ctx, firewall, resources)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) error); ok {
		r2 = rf(ctx, firewall, resources)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_ApplyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyResources'
type MockFirewallClient_ApplyResources_Call struct {
	*mock.Call
}

// ApplyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - firewall *hcloud.Firewall
//   - resources []hcloud.FirewallResource
func (_e *MockFirewallClient_Expecter) ApplyResources(ctx interface{}, firewall interface{}, resources interface{}) *MockFirewallClient_ApplyResources_Call {
	return &MockFirewallClient_ApplyResources_Call{Call: _e.mock.On("ApplyResources", ctx, firewall, resources)}
}

func (_c *MockFirewallClient_ApplyResources_Call) Run(run func(ctx context.Context, firewall *hcloud.Firewall, resources []hcloud.FirewallResource)) *MockFirewallClient_ApplyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Firewall), args[2].([]hcloud.FirewallResource))
	})
	return _c
}

func (_c *MockFirewallClient_ApplyResources_Call) Return(_a0 []*hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_ApplyResources_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_ApplyResources_Call) RunAndReturn(run func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error)) *MockFirewallClient_ApplyResources_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, opts
func (_m *MockFirewallClient) Create(ctx context.Context, opts hcloud.FirewallCreateOpts) (hcloud.FirewallCreateResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 hcloud.FirewallCreateResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallCreateOpts) (hcloud.FirewallCreateResult, *hcloud.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallCreateOpts) hcloud.FirewallCreateResult); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(hcloud.FirewallCreateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.FirewallCreateOpts) *hcloud.Response); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, hcloud.FirewallCreateOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFirewallClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.FirewallCreateOpts
func (_e *MockFirewallClient_Expecter) Create(ctx interface{}, opts interface{}) *MockFirewallClient_Create_Call {
	return &MockFirewallClient_Create_Call{Call: _e.mock.On("Create", ctx, opts)}
}

func (_c *MockFirewallClient_Create_Call) Run(run func(ctx context.Context, opts hcloud.FirewallCreateOpts)) *MockFirewallClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.FirewallCreateOpts))
	})
	return _c
}

func (_c *MockFirewallClient_Create_Call) Return(_a0 hcloud.FirewallCreateResult, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_Create_Call) RunAndReturn(run func(context.Context, hcloud.FirewallCreateOpts) (hcloud.FirewallCreateResult, *hcloud.Response, error)) *MockFirewallClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, firewall
func (_m *MockFirewallClient) Delete(ctx context.Context, firewall *hcloud.Firewall) (*hcloud.Response, error) {
	ret := _m.Called(ctx, firewall)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *hcloud.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall) (*hcloud.Response, error)); ok {
		return rf(ctx, firewall)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall) *hcloud.Response); ok {
		r0 = rf(ctx, firewall)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Firewall) error); ok {
		r1 = rf(ctx, firewall)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirewallClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFirewallClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - firewall *hcloud.Firewall
func (_e *MockFirewallClient_Expecter) Delete(ctx interface{}, firewall interface{}) *MockFirewallClient_Delete_Call {
	return &MockFirewallClient_Delete_Call{Call: _e.mock.On("Delete", ctx, firewall)}
}

func (_c *MockFirewallClient_Delete_Call) Run(run func(ctx context.Context, firewall *hcloud.Firewall)) *MockFirewallClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Firewall))
	})
	return _c
}

func (_c *MockFirewallClient_Delete_Call) Return(_a0 *hcloud.Response, _a1 error) *MockFirewallClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFirewallClient_Delete_Call) RunAndReturn(run func(context.Context, *hcloud.Firewall) (*hcloud.Response, error)) *MockFirewallClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, idOrName
func (_m *MockFirewallClient) Get(ctx context.Context, idOrName string) (*hcloud.Firewall, *hcloud.Response, error) {
	ret := _m.Called(ctx, idOrName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *hcloud.Firewall
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Firewall, *hcloud.Response, error)); ok {
		return rf(ctx, idOrName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Firewall); ok {
		r0 = rf(ctx, idOrName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, idOrName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, idOrName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFirewallClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
func (_e *MockFirewallClient_Expecter) Get(ctx interface{}, idOrName interface{}) *MockFirewallClient_Get_Call {
	return &MockFirewallClient_Get_Call{Call: _e.mock.On("Get", ctx, idOrName)}
}

func (_c *MockFirewallClient_Get_Call) Run(run func(ctx context.Context, idOrName string)) *MockFirewallClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirewallClient_Get_Call) Return(_a0 *hcloud.Firewall, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_Get_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Firewall, *hcloud.Response, error)) *MockFirewallClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockFirewallClient) GetByID(ctx context.Context, id int64) (*hcloud.Firewall, *hcloud.Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *hcloud.Firewall
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*hcloud.Firewall, *hcloud.Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *hcloud.Firewall); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) *hcloud.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFirewallClient_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockFirewallClient_Expecter) GetByID(ctx interface{}, id interface{}) *MockFirewallClient_GetByID_Call {
	return &MockFirewallClient_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFirewallClient_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockFirewallClient_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockFirewallClient_GetByID_Call) Return(_a0 *hcloud.Firewall, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_GetByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*hcloud.Firewall, *hcloud.Response, error)) *MockFirewallClient_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockFirewallClient) GetByName(ctx context.Context, name string) (*hcloud.Firewall, *hcloud.Response, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *hcloud.Firewall
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Firewall, *hcloud.Response, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Firewall); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockFirewallClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockFirewallClient_Expecter) GetByName(ctx interface{}, name interface{}) *MockFirewallClient_GetByName_Call {
	return &MockFirewallClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockFirewallClient_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockFirewallClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirewallClient_GetByName_Call) Return(_a0 *hcloud.Firewall, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_GetByName_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_GetByName_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Firewall, *hcloud.Response, error)) *MockFirewallClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockFirewallClient) List(ctx context.Context, opts hcloud.FirewallListOpts) ([]*hcloud.Firewall, *hcloud.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*hcloud.Firewall
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallListOpts) ([]*hcloud.Firewall, *hcloud.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.FirewallListOpts) []*hcloud.Firewall); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.FirewallListOpts) *hcloud.Response); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, hcloud.FirewallListOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFirewallClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.FirewallListOpts
func (_e *MockFirewallClient_Expecter) List(ctx interface{}, opts interface{}) *MockFirewallClient_List_Call {
	return &MockFirewallClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockFirewallClient_List_Call) Run(run func(ctx context.Context, opts hcloud.FirewallListOpts)) *MockFirewallClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.FirewallListOpts))
	})
	return _c
}

func (_c *MockFirewallClient_List_Call) Return(_a0 []*hcloud.Firewall, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_List_Call) RunAndReturn(run func(context.Context, hcloud.FirewallListOpts) ([]*hcloud.Firewall, *hcloud.Response, error)) *MockFirewallClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveResources provides a mock function with given fields: ctx, firewall, resources
func (_m *MockFirewallClient) RemoveResources(ctx context.Context, firewall *hcloud.Firewall, resources []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, firewall, resources)

	if len(ret) == 0 {
		panic("no return value specified for RemoveResources")
	}

	var r0 []*hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, firewall, resources)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) []*hcloud.Action); ok {
		r0 = rf(ctx, firewall, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) *hcloud.Response); ok {
		r1 = rf(ctx, firewall, resources)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) error); ok {
		r2 = rf(ctx, firewall, resources)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_RemoveResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveResources'
type MockFirewallClient_RemoveResources_Call struct {
	*mock.Call
}

// RemoveResources is a helper method to define mock.On call
//   - ctx context.Context
//   - firewall *hcloud.Firewall
//   - resources []hcloud.FirewallResource
func (_e *MockFirewallClient_Expecter) RemoveResources(ctx interface{}, firewall interface{}, resources interface{}) *MockFirewallClient_RemoveResources_Call {
	return &MockFirewallClient_RemoveResources_Call{Call: _e.mock.On("RemoveResources", ctx, firewall, resources)}
}

func (_c *MockFirewallClient_RemoveResources_Call) Run(run func(ctx context.Context, firewall *hcloud.Firewall, resources []hcloud.FirewallResource)) *MockFirewallClient_RemoveResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Firewall), args[2].([]hcloud.FirewallResource))
	})
	return _c
}

func (_c *MockFirewallClient_RemoveResources_Call) Return(_a0 []*hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_RemoveResources_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_RemoveResources_Call) RunAndReturn(run func(context.Context, *hcloud.Firewall, []hcloud.FirewallResource) ([]*hcloud.Action, *hcloud.Response, error)) *MockFirewallClient_RemoveResources_Call {
	_c.Call.Return(run)
	return _c
}

// SetRules provides a mock function with given fields: ctx, firewall, opts
func (_m *MockFirewallClient) SetRules(ctx context.Context, firewall *hcloud.Firewall, opts hcloud.FirewallSetRulesOpts) ([]*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, firewall, opts)

	if len(ret) == 0 {
		panic("no return value specified for SetRules")
	}

	var r0 []*hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, hcloud.FirewallSetRulesOpts) ([]*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, firewall, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, hcloud.FirewallSetRulesOpts) []*hcloud.Action); ok {
		r0 = rf(ctx, firewall, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Firewall, hcloud.FirewallSetRulesOpts) *hcloud.Response); ok {
		r1 = rf(ctx, firewall, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Firewall, hcloud.FirewallSetRulesOpts) error); ok {
		r2 = rf(ctx, firewall, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_SetRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRules'
type MockFirewallClient_SetRules_Call struct {
	*mock.Call
}

// SetRules is a helper method to define mock.On call
//   - ctx context.Context
//   - firewall *hcloud.Firewall
//   - opts hcloud.FirewallSetRulesOpts
func (_e *MockFirewallClient_Expecter) SetRules(ctx interface{}, firewall interface{}, opts interface{}) *MockFirewallClient_SetRules_Call {
	return &MockFirewallClient_SetRules_Call{Call: _e.mock.On("SetRules", ctx, firewall, opts)}
}

func (_c *MockFirewallClient_SetRules_Call) Run(run func(ctx context.Context, firewall *hcloud.Firewall, opts hcloud.FirewallSetRulesOpts)) *MockFirewallClient_SetRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Firewall), args[2].(hcloud.FirewallSetRulesOpts))
	})
	return _c
}

func (_c *MockFirewallClient_SetRules_Call) Return(_a0 []*hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_SetRules_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_SetRules_Call) RunAndReturn(run func(context.Context, *hcloud.Firewall, hcloud.FirewallSetRulesOpts) ([]*hcloud.Action, *hcloud.Response, error)) *MockFirewallClient_SetRules_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, firewall, opts
func (_m *MockFirewallClient) Update(ctx context.Context, firewall *hcloud.Firewall, opts hcloud.FirewallUpdateOpts) (*hcloud.Firewall, *hcloud.Response, error) {
	ret := _m.Called(ctx, firewall, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *hcloud.Firewall
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, hcloud.FirewallUpdateOpts) (*hcloud.Firewall, *hcloud.Response, error)); ok {
		return rf(ctx, firewall, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Firewall, hcloud.FirewallUpdateOpts) *hcloud.Firewall); ok {
		r0 = rf(ctx, firewall, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Firewall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Firewall, hcloud.FirewallUpdateOpts) *hcloud.Response); ok {
		r1 = rf(ctx, firewall, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Firewall, hcloud.FirewallUpdateOpts) error); ok {
		r2 = rf(ctx, firewall, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFirewallClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFirewallClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - firewall *hcloud.Firewall
//   - opts hcloud.FirewallUpdateOpts
func (_e *MockFirewallClient_Expecter) Update(ctx interface{}, firewall interface{}, opts interface{}) *MockFirewallClient_Update_Call {
	return &MockFirewallClient_Update_Call{Call: _e.mock.On("Update", ctx, firewall, opts)}
}

func (_c *MockFirewallClient_Update_Call) Run(run func(ctx context.Context, firewall *hcloud.Firewall, opts hcloud.FirewallUpdateOpts)) *MockFirewallClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Firewall), args[2].(hcloud.FirewallUpdateOpts))
	})
	return _c
}

func (_c *MockFirewallClient_Update_Call) Return(_a0 *hcloud.Firewall, _a1 *hcloud.Response, _a2 error) *MockFirewallClient_Update_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFirewallClient_Update_Call) RunAndReturn(run func(context.Context, *hcloud.Firewall, hcloud.FirewallUpdateOpts) (*hcloud.Firewall, *hcloud.Response, error)) *MockFirewallClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFirewallClient creates a new instance of MockFirewallClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFirewallClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFirewallClient {
	mock := &MockFirewallClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

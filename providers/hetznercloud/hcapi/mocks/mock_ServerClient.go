// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"

	mock "github.com/stretchr/testify/mock"
)

// MockServerClient is an autogenerated mock type for the ServerClient type
type MockServerClient struct {
	mock.Mock
}

type MockServerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerClient) EXPECT() *MockServerClient_Expecter {
	return &MockServerClient_Expecter{mock: &_m.Mock}
}

// AddToPlacementGroup provides a mock function with given fields: ctx, server, placementGroup
func (_m *MockServerClient) AddToPlacementGroup(ctx context.Context, server *hcloud.Server, placementGroup *hcloud.PlacementGroup) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, placementGroup)

	if len(ret) == 0 {
		panic("no return value specified for AddToPlacementGroup")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.PlacementGroup) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, placementGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.PlacementGroup) *hcloud.Action); ok {
		r0 = rf(ctx, server, placementGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, *hcloud.PlacementGroup) *hcloud.Response); ok {
		r1 = rf(ctx, server, placementGroup)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, *hcloud.PlacementGroup) error); ok {
		r2 = rf(ctx, server, placementGroup)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_AddToPlacementGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToPlacementGroup'
type MockServerClient_AddToPlacementGroup_Call struct {
	*mock.Call
}

// AddToPlacementGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - placementGroup *hcloud.PlacementGroup
func (_e *MockServerClient_Expecter) AddToPlacementGroup(ctx interface{}, server interface{}, placementGroup interface{}) *MockServerClient_AddToPlacementGroup_Call {
	return &MockServerClient_AddToPlacementGroup_Call{Call: _e.mock.On("AddToPlacementGroup", ctx, server, placementGroup)}
}

func (_c *MockServerClient_AddToPlacementGroup_Call) Run(run func(ctx context.Context, server *hcloud.Server, placementGroup *hcloud.PlacementGroup)) *MockServerClient_AddToPlacementGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(*hcloud.PlacementGroup))
	})
	return _c
}

func (_c *MockServerClient_AddToPlacementGroup_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_AddToPlacementGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_AddToPlacementGroup_Call) RunAndReturn(run func(context.Context, *hcloud.Server, *hcloud.PlacementGroup) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_AddToPlacementGroup_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with given fields: ctx
func (_m *MockServerClient) All(ctx context.Context) ([]*hcloud.Server, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*hcloud.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*hcloud.Server, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*hcloud.Server); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServerClient_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockServerClient_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServerClient_Expecter) All(ctx interface{}) *MockServerClient_All_Call {
	return &MockServerClient_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockServerClient_All_Call) Run(run func(ctx context.Context)) *MockServerClient_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServerClient_All_Call) Return(_a0 []*hcloud.Server, _a1 error) *MockServerClient_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServerClient_All_Call) RunAndReturn(run func(context.Context) ([]*hcloud.Server, error)) *MockServerClient_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithOpts provides a mock function with given fields: ctx, opts
func (_m *MockServerClient) AllWithOpts(ctx context.Context, opts hcloud.ServerListOpts) ([]*hcloud.Server, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AllWithOpts")
	}

	var r0 []*hcloud.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerListOpts) ([]*hcloud.Server, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerListOpts) []*hcloud.Server); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.ServerListOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServerClient_AllWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithOpts'
type MockServerClient_AllWithOpts_Call struct {
	*mock.Call
}

// AllWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ServerListOpts
func (_e *MockServerClient_Expecter) AllWithOpts(ctx interface{}, opts interface{}) *MockServerClient_AllWithOpts_Call {
	return &MockServerClient_AllWithOpts_Call{Call: _e.mock.On("AllWithOpts", ctx, opts)}
}

func (_c *MockServerClient_AllWithOpts_Call) Run(run func(ctx context.Context, opts hcloud.ServerListOpts)) *MockServerClient_AllWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.ServerListOpts))
	})
	return _c
}

func (_c *MockServerClient_AllWithOpts_Call) Return(_a0 []*hcloud.Server, _a1 error) *MockServerClient_AllWithOpts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServerClient_AllWithOpts_Call) RunAndReturn(run func(context.Context, hcloud.ServerListOpts) ([]*hcloud.Server, error)) *MockServerClient_AllWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// AttachISO provides a mock function with given fields: ctx, server, iso
func (_m *MockServerClient) AttachISO(ctx context.Context, server *hcloud.Server, iso *hcloud.ISO) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, iso)

	if len(ret) == 0 {
		panic("no return value specified for AttachISO")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.ISO) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, iso)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.ISO) *hcloud.Action); ok {
		r0 = rf(ctx, server, iso)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, *hcloud.ISO) *hcloud.Response); ok {
		r1 = rf(ctx, server, iso)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, *hcloud.ISO) error); ok {
		r2 = rf(ctx, server, iso)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_AttachISO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachISO'
type MockServerClient_AttachISO_Call struct {
	*mock.Call
}

// AttachISO is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - iso *hcloud.ISO
func (_e *MockServerClient_Expecter) AttachISO(ctx interface{}, server interface{}, iso interface{}) *MockServerClient_AttachISO_Call {
	return &MockServerClient_AttachISO_Call{Call: _e.mock.On("AttachISO", ctx, server, iso)}
}

func (_c *MockServerClient_AttachISO_Call) Run(run func(ctx context.Context, server *hcloud.Server, iso *hcloud.ISO)) *MockServerClient_AttachISO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(*hcloud.ISO))
	})
	return _c
}

func (_c *MockServerClient_AttachISO_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_AttachISO_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_AttachISO_Call) RunAndReturn(run func(context.Context, *hcloud.Server, *hcloud.ISO) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_AttachISO_Call {
	_c.Call.Return(run)
	return _c
}

// AttachToNetwork provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) AttachToNetwork(ctx context.Context, server *hcloud.Server, opts hcloud.ServerAttachToNetworkOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for AttachToNetwork")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerAttachToNetworkOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerAttachToNetworkOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerAttachToNetworkOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerAttachToNetworkOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_AttachToNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachToNetwork'
type MockServerClient_AttachToNetwork_Call struct {
	*mock.Call
}

// AttachToNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerAttachToNetworkOpts
func (_e *MockServerClient_Expecter) AttachToNetwork(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_AttachToNetwork_Call {
	return &MockServerClient_AttachToNetwork_Call{Call: _e.mock.On("AttachToNetwork", ctx, server, opts)}
}

func (_c *MockServerClient_AttachToNetwork_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerAttachToNetworkOpts)) *MockServerClient_AttachToNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerAttachToNetworkOpts))
	})
	return _c
}

func (_c *MockServerClient_AttachToNetwork_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_AttachToNetwork_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_AttachToNetwork_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerAttachToNetworkOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_AttachToNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeAliasIPs provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) ChangeAliasIPs(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeAliasIPsOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAliasIPs")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeAliasIPsOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeAliasIPsOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerChangeAliasIPsOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerChangeAliasIPsOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_ChangeAliasIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeAliasIPs'
type MockServerClient_ChangeAliasIPs_Call struct {
	*mock.Call
}

// ChangeAliasIPs is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerChangeAliasIPsOpts
func (_e *MockServerClient_Expecter) ChangeAliasIPs(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_ChangeAliasIPs_Call {
	return &MockServerClient_ChangeAliasIPs_Call{Call: _e.mock.On("ChangeAliasIPs", ctx, server, opts)}
}

func (_c *MockServerClient_ChangeAliasIPs_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeAliasIPsOpts)) *MockServerClient_ChangeAliasIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerChangeAliasIPsOpts))
	})
	return _c
}

func (_c *MockServerClient_ChangeAliasIPs_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_ChangeAliasIPs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_ChangeAliasIPs_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerChangeAliasIPsOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_ChangeAliasIPs_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeDNSPtr provides a mock function with given fields: ctx, server, ip, ptr
func (_m *MockServerClient) ChangeDNSPtr(ctx context.Context, server *hcloud.Server, ip string, ptr *string) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, ip, ptr)

	if len(ret) == 0 {
		panic("no return value specified for ChangeDNSPtr")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, string, *string) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, ip, ptr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, string, *string) *hcloud.Action); ok {
		r0 = rf(ctx, server, ip, ptr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, string, *string) *hcloud.Response); ok {
		r1 = rf(ctx, server, ip, ptr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, string, *string) error); ok {
		r2 = rf(ctx, server, ip, ptr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_ChangeDNSPtr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeDNSPtr'
type MockServerClient_ChangeDNSPtr_Call struct {
	*mock.Call
}

// ChangeDNSPtr is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - ip string
//   - ptr *string
func (_e *MockServerClient_Expecter) ChangeDNSPtr(ctx interface{}, server interface{}, ip interface{}, ptr interface{}) *MockServerClient_ChangeDNSPtr_Call {
	return &MockServerClient_ChangeDNSPtr_Call{Call: _e.mock.On("ChangeDNSPtr", ctx, server, ip, ptr)}
}

func (_c *MockServerClient_ChangeDNSPtr_Call) Run(run func(ctx context.Context, server *hcloud.Server, ip string, ptr *string)) *MockServerClient_ChangeDNSPtr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *MockServerClient_ChangeDNSPtr_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_ChangeDNSPtr_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_ChangeDNSPtr_Call) RunAndReturn(run func(context.Context, *hcloud.Server, string, *string) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_ChangeDNSPtr_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeProtection provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) ChangeProtection(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for ChangeProtection")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeProtectionOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerChangeProtectionOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerChangeProtectionOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_ChangeProtection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeProtection'
type MockServerClient_ChangeProtection_Call struct {
	*mock.Call
}

// ChangeProtection is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerChangeProtectionOpts
func (_e *MockServerClient_Expecter) ChangeProtection(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_ChangeProtection_Call {
	return &MockServerClient_ChangeProtection_Call{Call: _e.mock.On("ChangeProtection", ctx, server, opts)}
}

func (_c *MockServerClient_ChangeProtection_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeProtectionOpts)) *MockServerClient_ChangeProtection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerChangeProtectionOpts))
	})
	return _c
}

func (_c *MockServerClient_ChangeProtection_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_ChangeProtection_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_ChangeProtection_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_ChangeProtection_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeType provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) ChangeType(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeTypeOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for ChangeType")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeTypeOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerChangeTypeOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerChangeTypeOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerChangeTypeOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_ChangeType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeType'
type MockServerClient_ChangeType_Call struct {
	*mock.Call
}

// ChangeType is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerChangeTypeOpts
func (_e *MockServerClient_Expecter) ChangeType(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_ChangeType_Call {
	return &MockServerClient_ChangeType_Call{Call: _e.mock.On("ChangeType", ctx, server, opts)}
}

func (_c *MockServerClient_ChangeType_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerChangeTypeOpts)) *MockServerClient_ChangeType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerChangeTypeOpts))
	})
	return _c
}

func (_c *MockServerClient_ChangeType_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_ChangeType_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_ChangeType_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerChangeTypeOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_ChangeType_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, opts
func (_m *MockServerClient) Create(ctx context.Context, opts hcloud.ServerCreateOpts) (hcloud.ServerCreateResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 hcloud.ServerCreateResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerCreateOpts) (hcloud.ServerCreateResult, *hcloud.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerCreateOpts) hcloud.ServerCreateResult); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(hcloud.ServerCreateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.ServerCreateOpts) *hcloud.Response); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, hcloud.ServerCreateOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServerClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ServerCreateOpts
func (_e *MockServerClient_Expecter) Create(ctx interface{}, opts interface{}) *MockServerClient_Create_Call {
	return &MockServerClient_Create_Call{Call: _e.mock.On("Create", ctx, opts)}
}

func (_c *MockServerClient_Create_Call) Run(run func(ctx context.Context, opts hcloud.ServerCreateOpts)) *MockServerClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.ServerCreateOpts))
	})
	return _c
}

func (_c *MockServerClient_Create_Call) Return(_a0 hcloud.ServerCreateResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Create_Call) RunAndReturn(run func(context.Context, hcloud.ServerCreateOpts) (hcloud.ServerCreateResult, *hcloud.Response, error)) *MockServerClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) CreateImage(ctx context.Context, server *hcloud.Server, opts *hcloud.ServerCreateImageOpts) (hcloud.ServerCreateImageResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 hcloud.ServerCreateImageResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.ServerCreateImageOpts) (hcloud.ServerCreateImageResult, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, *hcloud.ServerCreateImageOpts) hcloud.ServerCreateImageResult); ok {
		r0 = rf(ctx, server, opts)
	} else {
		r0 = ret.Get(0).(hcloud.ServerCreateImageResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, *hcloud.ServerCreateImageOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, *hcloud.ServerCreateImageOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type MockServerClient_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts *hcloud.ServerCreateImageOpts
func (_e *MockServerClient_Expecter) CreateImage(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_CreateImage_Call {
	return &MockServerClient_CreateImage_Call{Call: _e.mock.On("CreateImage", ctx, server, opts)}
}

func (_c *MockServerClient_CreateImage_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts *hcloud.ServerCreateImageOpts)) *MockServerClient_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(*hcloud.ServerCreateImageOpts))
	})
	return _c
}

func (_c *MockServerClient_CreateImage_Call) Return(_a0 hcloud.ServerCreateImageResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_CreateImage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_CreateImage_Call) RunAndReturn(run func(context.Context, *hcloud.Server, *hcloud.ServerCreateImageOpts) (hcloud.ServerCreateImageResult, *hcloud.Response, error)) *MockServerClient_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Delete(ctx context.Context, server *hcloud.Server) (*hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *hcloud.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) error); ok {
		r1 = rf(ctx, server)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServerClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServerClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Delete(ctx interface{}, server interface{}) *MockServerClient_Delete_Call {
	return &MockServerClient_Delete_Call{Call: _e.mock.On("Delete", ctx, server)}
}

func (_c *MockServerClient_Delete_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Delete_Call) Return(_a0 *hcloud.Response, _a1 error) *MockServerClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServerClient_Delete_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Response, error)) *MockServerClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWithResult provides a mock function with given fields: ctx, server
func (_m *MockServerClient) DeleteWithResult(ctx context.Context, server *hcloud.Server) (*hcloud.ServerDeleteResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWithResult")
	}

	var r0 *hcloud.ServerDeleteResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.ServerDeleteResult, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.ServerDeleteResult); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.ServerDeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_DeleteWithResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWithResult'
type MockServerClient_DeleteWithResult_Call struct {
	*mock.Call
}

// DeleteWithResult is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) DeleteWithResult(ctx interface{}, server interface{}) *MockServerClient_DeleteWithResult_Call {
	return &MockServerClient_DeleteWithResult_Call{Call: _e.mock.On("DeleteWithResult", ctx, server)}
}

func (_c *MockServerClient_DeleteWithResult_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_DeleteWithResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_DeleteWithResult_Call) Return(_a0 *hcloud.ServerDeleteResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_DeleteWithResult_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_DeleteWithResult_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.ServerDeleteResult, *hcloud.Response, error)) *MockServerClient_DeleteWithResult_Call {
	_c.Call.Return(run)
	return _c
}

// DetachFromNetwork provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) DetachFromNetwork(ctx context.Context, server *hcloud.Server, opts hcloud.ServerDetachFromNetworkOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for DetachFromNetwork")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerDetachFromNetworkOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerDetachFromNetworkOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerDetachFromNetworkOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerDetachFromNetworkOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_DetachFromNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachFromNetwork'
type MockServerClient_DetachFromNetwork_Call struct {
	*mock.Call
}

// DetachFromNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerDetachFromNetworkOpts
func (_e *MockServerClient_Expecter) DetachFromNetwork(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_DetachFromNetwork_Call {
	return &MockServerClient_DetachFromNetwork_Call{Call: _e.mock.On("DetachFromNetwork", ctx, server, opts)}
}

func (_c *MockServerClient_DetachFromNetwork_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerDetachFromNetworkOpts)) *MockServerClient_DetachFromNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerDetachFromNetworkOpts))
	})
	return _c
}

func (_c *MockServerClient_DetachFromNetwork_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_DetachFromNetwork_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_DetachFromNetwork_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerDetachFromNetworkOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_DetachFromNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DetachISO provides a mock function with given fields: ctx, server
func (_m *MockServerClient) DetachISO(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for DetachISO")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_DetachISO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachISO'
type MockServerClient_DetachISO_Call struct {
	*mock.Call
}

// DetachISO is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) DetachISO(ctx interface{}, server interface{}) *MockServerClient_DetachISO_Call {
	return &MockServerClient_DetachISO_Call{Call: _e.mock.On("DetachISO", ctx, server)}
}

func (_c *MockServerClient_DetachISO_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_DetachISO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_DetachISO_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_DetachISO_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_DetachISO_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_DetachISO_Call {
	_c.Call.Return(run)
	return _c
}

// DisableBackup provides a mock function with given fields: ctx, server
func (_m *MockServerClient) DisableBackup(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for DisableBackup")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_DisableBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableBackup'
type MockServerClient_DisableBackup_Call struct {
	*mock.Call
}

// DisableBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) DisableBackup(ctx interface{}, server interface{}) *MockServerClient_DisableBackup_Call {
	return &MockServerClient_DisableBackup_Call{Call: _e.mock.On("DisableBackup", ctx, server)}
}

func (_c *MockServerClient_DisableBackup_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_DisableBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_DisableBackup_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_DisableBackup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_DisableBackup_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_DisableBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DisableRescue provides a mock function with given fields: ctx, server
func (_m *MockServerClient) DisableRescue(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for DisableRescue")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_DisableRescue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableRescue'
type MockServerClient_DisableRescue_Call struct {
	*mock.Call
}

// DisableRescue is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) DisableRescue(ctx interface{}, server interface{}) *MockServerClient_DisableRescue_Call {
	return &MockServerClient_DisableRescue_Call{Call: _e.mock.On("DisableRescue", ctx, server)}
}

func (_c *MockServerClient_DisableRescue_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_DisableRescue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_DisableRescue_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_DisableRescue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_DisableRescue_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_DisableRescue_Call {
	_c.Call.Return(run)
	return _c
}

// EnableBackup provides a mock function with given fields: ctx, server, window
func (_m *MockServerClient) EnableBackup(ctx context.Context, server *hcloud.Server, window string) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, window)

	if len(ret) == 0 {
		panic("no return value specified for EnableBackup")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, string) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, window)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, string) *hcloud.Action); ok {
		r0 = rf(ctx, server, window)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, string) *hcloud.Response); ok {
		r1 = rf(ctx, server, window)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, string) error); ok {
		r2 = rf(ctx, server, window)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_EnableBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableBackup'
type MockServerClient_EnableBackup_Call struct {
	*mock.Call
}

// EnableBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - window string
func (_e *MockServerClient_Expecter) EnableBackup(ctx interface{}, server interface{}, window interface{}) *MockServerClient_EnableBackup_Call {
	return &MockServerClient_EnableBackup_Call{Call: _e.mock.On("EnableBackup", ctx, server, window)}
}

func (_c *MockServerClient_EnableBackup_Call) Run(run func(ctx context.Context, server *hcloud.Server, window string)) *MockServerClient_EnableBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(string))
	})
	return _c
}

func (_c *MockServerClient_EnableBackup_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_EnableBackup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_EnableBackup_Call) RunAndReturn(run func(context.Context, *hcloud.Server, string) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_EnableBackup_Call {
	_c.Call.Return(run)
	return _c
}

// EnableRescue provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) EnableRescue(ctx context.Context, server *hcloud.Server, opts hcloud.ServerEnableRescueOpts) (hcloud.ServerEnableRescueResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for EnableRescue")
	}

	var r0 hcloud.ServerEnableRescueResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerEnableRescueOpts) (hcloud.ServerEnableRescueResult, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerEnableRescueOpts) hcloud.ServerEnableRescueResult); ok {
		r0 = rf(ctx, server, opts)
	} else {
		r0 = ret.Get(0).(hcloud.ServerEnableRescueResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerEnableRescueOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerEnableRescueOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_EnableRescue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableRescue'
type MockServerClient_EnableRescue_Call struct {
	*mock.Call
}

// EnableRescue is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerEnableRescueOpts
func (_e *MockServerClient_Expecter) EnableRescue(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_EnableRescue_Call {
	return &MockServerClient_EnableRescue_Call{Call: _e.mock.On("EnableRescue", ctx, server, opts)}
}

func (_c *MockServerClient_EnableRescue_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerEnableRescueOpts)) *MockServerClient_EnableRescue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerEnableRescueOpts))
	})
	return _c
}

func (_c *MockServerClient_EnableRescue_Call) Return(_a0 hcloud.ServerEnableRescueResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_EnableRescue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_EnableRescue_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerEnableRescueOpts) (hcloud.ServerEnableRescueResult, *hcloud.Response, error)) *MockServerClient_EnableRescue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, idOrName
func (_m *MockServerClient) Get(ctx context.Context, idOrName string) (*hcloud.Server, *hcloud.Response, error) {
	ret := _m.Called(ctx, idOrName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *hcloud.Server
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Server, *hcloud.Response, error)); ok {
		return rf(ctx, idOrName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Server); ok {
		r0 = rf(ctx, idOrName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, idOrName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, idOrName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServerClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
func (_e *MockServerClient_Expecter) Get(ctx interface{}, idOrName interface{}) *MockServerClient_Get_Call {
	return &MockServerClient_Get_Call{Call: _e.mock.On("Get", ctx, idOrName)}
}

func (_c *MockServerClient_Get_Call) Run(run func(ctx context.Context, idOrName string)) *MockServerClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServerClient_Get_Call) Return(_a0 *hcloud.Server, _a1 *hcloud.Response, _a2 error) *MockServerClient_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Get_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Server, *hcloud.Response, error)) *MockServerClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockServerClient) GetByID(ctx context.Context, id int64) (*hcloud.Server, *hcloud.Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *hcloud.Server
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*hcloud.Server, *hcloud.Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *hcloud.Server); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) *hcloud.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockServerClient_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockServerClient_Expecter) GetByID(ctx interface{}, id interface{}) *MockServerClient_GetByID_Call {
	return &MockServerClient_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockServerClient_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockServerClient_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockServerClient_GetByID_Call) Return(_a0 *hcloud.Server, _a1 *hcloud.Response, _a2 error) *MockServerClient_GetByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*hcloud.Server, *hcloud.Response, error)) *MockServerClient_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockServerClient) GetByName(ctx context.Context, name string) (*hcloud.Server, *hcloud.Response, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *hcloud.Server
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Server, *hcloud.Response, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Server); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockServerClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServerClient_Expecter) GetByName(ctx interface{}, name interface{}) *MockServerClient_GetByName_Call {
	return &MockServerClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockServerClient_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockServerClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServerClient_GetByName_Call) Return(_a0 *hcloud.Server, _a1 *hcloud.Response, _a2 error) *MockServerClient_GetByName_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_GetByName_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Server, *hcloud.Response, error)) *MockServerClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) GetMetrics(ctx context.Context, server *hcloud.Server, opts hcloud.ServerGetMetricsOpts) (*hcloud.ServerMetrics, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 *hcloud.ServerMetrics
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerGetMetricsOpts) (*hcloud.ServerMetrics, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerGetMetricsOpts) *hcloud.ServerMetrics); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.ServerMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerGetMetricsOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerGetMetricsOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockServerClient_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerGetMetricsOpts
func (_e *MockServerClient_Expecter) GetMetrics(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_GetMetrics_Call {
	return &MockServerClient_GetMetrics_Call{Call: _e.mock.On("GetMetrics", ctx, server, opts)}
}

func (_c *MockServerClient_GetMetrics_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerGetMetricsOpts)) *MockServerClient_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerGetMetricsOpts))
	})
	return _c
}

func (_c *MockServerClient_GetMetrics_Call) Return(_a0 *hcloud.ServerMetrics, _a1 *hcloud.Response, _a2 error) *MockServerClient_GetMetrics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_GetMetrics_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerGetMetricsOpts) (*hcloud.ServerMetrics, *hcloud.Response, error)) *MockServerClient_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockServerClient) List(ctx context.Context, opts hcloud.ServerListOpts) ([]*hcloud.Server, *hcloud.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*hcloud.Server
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerListOpts) ([]*hcloud.Server, *hcloud.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ServerListOpts) []*hcloud.Server); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.ServerListOpts) *hcloud.Response); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, hcloud.ServerListOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServerClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ServerListOpts
func (_e *MockServerClient_Expecter) List(ctx interface{}, opts interface{}) *MockServerClient_List_Call {
	return &MockServerClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockServerClient_List_Call) Run(run func(ctx context.Context, opts hcloud.ServerListOpts)) *MockServerClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.ServerListOpts))
	})
	return _c
}

func (_c *MockServerClient_List_Call) Return(_a0 []*hcloud.Server, _a1 *hcloud.Response, _a2 error) *MockServerClient_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_List_Call) RunAndReturn(run func(context.Context, hcloud.ServerListOpts) ([]*hcloud.Server, *hcloud.Response, error)) *MockServerClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Poweroff provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Poweroff(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Poweroff")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Poweroff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poweroff'
type MockServerClient_Poweroff_Call struct {
	*mock.Call
}

// Poweroff is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Poweroff(ctx interface{}, server interface{}) *MockServerClient_Poweroff_Call {
	return &MockServerClient_Poweroff_Call{Call: _e.mock.On("Poweroff", ctx, server)}
}

func (_c *MockServerClient_Poweroff_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Poweroff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Poweroff_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Poweroff_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Poweroff_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Poweroff_Call {
	_c.Call.Return(run)
	return _c
}

// Poweron provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Poweron(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Poweron")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Poweron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poweron'
type MockServerClient_Poweron_Call struct {
	*mock.Call
}

// Poweron is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Poweron(ctx interface{}, server interface{}) *MockServerClient_Poweron_Call {
	return &MockServerClient_Poweron_Call{Call: _e.mock.On("Poweron", ctx, server)}
}

func (_c *MockServerClient_Poweron_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Poweron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Poweron_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Poweron_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Poweron_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Poweron_Call {
	_c.Call.Return(run)
	return _c
}

// Reboot provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Reboot(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Reboot")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Reboot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reboot'
type MockServerClient_Reboot_Call struct {
	*mock.Call
}

// Reboot is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Reboot(ctx interface{}, server interface{}) *MockServerClient_Reboot_Call {
	return &MockServerClient_Reboot_Call{Call: _e.mock.On("Reboot", ctx, server)}
}

func (_c *MockServerClient_Reboot_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Reboot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Reboot_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Reboot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Reboot_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Reboot_Call {
	_c.Call.Return(run)
	return _c
}

// Rebuild provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) Rebuild(ctx context.Context, server *hcloud.Server, opts hcloud.ServerRebuildOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for Rebuild")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) *hcloud.Action); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Rebuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rebuild'
type MockServerClient_Rebuild_Call struct {
	*mock.Call
}

// Rebuild is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerRebuildOpts
func (_e *MockServerClient_Expecter) Rebuild(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_Rebuild_Call {
	return &MockServerClient_Rebuild_Call{Call: _e.mock.On("Rebuild", ctx, server, opts)}
}

func (_c *MockServerClient_Rebuild_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerRebuildOpts)) *MockServerClient_Rebuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerRebuildOpts))
	})
	return _c
}

func (_c *MockServerClient_Rebuild_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Rebuild_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Rebuild_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Rebuild_Call {
	_c.Call.Return(run)
	return _c
}

// RebuildWithResult provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) RebuildWithResult(ctx context.Context, server *hcloud.Server, opts hcloud.ServerRebuildOpts) (hcloud.ServerRebuildResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for RebuildWithResult")
	}

	var r0 hcloud.ServerRebuildResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) (hcloud.ServerRebuildResult, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) hcloud.ServerRebuildResult); ok {
		r0 = rf(ctx, server, opts)
	} else {
		r0 = ret.Get(0).(hcloud.ServerRebuildResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_RebuildWithResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RebuildWithResult'
type MockServerClient_RebuildWithResult_Call struct {
	*mock.Call
}

// RebuildWithResult is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerRebuildOpts
func (_e *MockServerClient_Expecter) RebuildWithResult(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_RebuildWithResult_Call {
	return &MockServerClient_RebuildWithResult_Call{Call: _e.mock.On("RebuildWithResult", ctx, server, opts)}
}

func (_c *MockServerClient_RebuildWithResult_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerRebuildOpts)) *MockServerClient_RebuildWithResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerRebuildOpts))
	})
	return _c
}

func (_c *MockServerClient_RebuildWithResult_Call) Return(_a0 hcloud.ServerRebuildResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_RebuildWithResult_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_RebuildWithResult_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerRebuildOpts) (hcloud.ServerRebuildResult, *hcloud.Response, error)) *MockServerClient_RebuildWithResult_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromPlacementGroup provides a mock function with given fields: ctx, server
func (_m *MockServerClient) RemoveFromPlacementGroup(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromPlacementGroup")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_RemoveFromPlacementGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromPlacementGroup'
type MockServerClient_RemoveFromPlacementGroup_Call struct {
	*mock.Call
}

// RemoveFromPlacementGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) RemoveFromPlacementGroup(ctx interface{}, server interface{}) *MockServerClient_RemoveFromPlacementGroup_Call {
	return &MockServerClient_RemoveFromPlacementGroup_Call{Call: _e.mock.On("RemoveFromPlacementGroup", ctx, server)}
}

func (_c *MockServerClient_RemoveFromPlacementGroup_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_RemoveFromPlacementGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_RemoveFromPlacementGroup_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_RemoveFromPlacementGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_RemoveFromPlacementGroup_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_RemoveFromPlacementGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RequestConsole provides a mock function with given fields: ctx, server
func (_m *MockServerClient) RequestConsole(ctx context.Context, server *hcloud.Server) (hcloud.ServerRequestConsoleResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for RequestConsole")
	}

	var r0 hcloud.ServerRequestConsoleResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (hcloud.ServerRequestConsoleResult, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) hcloud.ServerRequestConsoleResult); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Get(0).(hcloud.ServerRequestConsoleResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_RequestConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestConsole'
type MockServerClient_RequestConsole_Call struct {
	*mock.Call
}

// RequestConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) RequestConsole(ctx interface{}, server interface{}) *MockServerClient_RequestConsole_Call {
	return &MockServerClient_RequestConsole_Call{Call: _e.mock.On("RequestConsole", ctx, server)}
}

func (_c *MockServerClient_RequestConsole_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_RequestConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_RequestConsole_Call) Return(_a0 hcloud.ServerRequestConsoleResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_RequestConsole_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_RequestConsole_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (hcloud.ServerRequestConsoleResult, *hcloud.Response, error)) *MockServerClient_RequestConsole_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Reset(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockServerClient_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Reset(ctx interface{}, server interface{}) *MockServerClient_Reset_Call {
	return &MockServerClient_Reset_Call{Call: _e.mock.On("Reset", ctx, server)}
}

func (_c *MockServerClient_Reset_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Reset_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Reset_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Reset_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, server
func (_m *MockServerClient) ResetPassword(ctx context.Context, server *hcloud.Server) (hcloud.ServerResetPasswordResult, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 hcloud.ServerResetPasswordResult
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (hcloud.ServerResetPasswordResult, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) hcloud.ServerResetPasswordResult); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Get(0).(hcloud.ServerResetPasswordResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockServerClient_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) ResetPassword(ctx interface{}, server interface{}) *MockServerClient_ResetPassword_Call {
	return &MockServerClient_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, server)}
}

func (_c *MockServerClient_ResetPassword_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_ResetPassword_Call) Return(_a0 hcloud.ServerResetPasswordResult, _a1 *hcloud.Response, _a2 error) *MockServerClient_ResetPassword_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_ResetPassword_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (hcloud.ServerResetPasswordResult, *hcloud.Response, error)) *MockServerClient_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx, server
func (_m *MockServerClient) Shutdown(ctx context.Context, server *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server) *hcloud.Action); ok {
		r0 = rf(ctx, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server) *hcloud.Response); ok {
		r1 = rf(ctx, server)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server) error); ok {
		r2 = rf(ctx, server)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockServerClient_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
func (_e *MockServerClient_Expecter) Shutdown(ctx interface{}, server interface{}) *MockServerClient_Shutdown_Call {
	return &MockServerClient_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx, server)}
}

func (_c *MockServerClient_Shutdown_Call) Run(run func(ctx context.Context, server *hcloud.Server)) *MockServerClient_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server))
	})
	return _c
}

func (_c *MockServerClient_Shutdown_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockServerClient_Shutdown_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Shutdown_Call) RunAndReturn(run func(context.Context, *hcloud.Server) (*hcloud.Action, *hcloud.Response, error)) *MockServerClient_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, server, opts
func (_m *MockServerClient) Update(ctx context.Context, server *hcloud.Server, opts hcloud.ServerUpdateOpts) (*hcloud.Server, *hcloud.Response, error) {
	ret := _m.Called(ctx, server, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *hcloud.Server
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerUpdateOpts) (*hcloud.Server, *hcloud.Response, error)); ok {
		return rf(ctx, server, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Server, hcloud.ServerUpdateOpts) *hcloud.Server); ok {
		r0 = rf(ctx, server, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Server, hcloud.ServerUpdateOpts) *hcloud.Response); ok {
		r1 = rf(ctx, server, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Server, hcloud.ServerUpdateOpts) error); ok {
		r2 = rf(ctx, server, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServerClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServerClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - server *hcloud.Server
//   - opts hcloud.ServerUpdateOpts
func (_e *MockServerClient_Expecter) Update(ctx interface{}, server interface{}, opts interface{}) *MockServerClient_Update_Call {
	return &MockServerClient_Update_Call{Call: _e.mock.On("Update", ctx, server, opts)}
}

func (_c *MockServerClient_Update_Call) Run(run func(ctx context.Context, server *hcloud.Server, opts hcloud.ServerUpdateOpts)) *MockServerClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Server), args[2].(hcloud.ServerUpdateOpts))
	})
	return _c
}

func (_c *MockServerClient_Update_Call) Return(_a0 *hcloud.Server, _a1 *hcloud.Response, _a2 error) *MockServerClient_Update_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServerClient_Update_Call) RunAndReturn(run func(context.Context, *hcloud.Server, hcloud.ServerUpdateOpts) (*hcloud.Server, *hcloud.Response, error)) *MockServerClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerClient creates a new instance of MockServerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerClient {
	mock := &MockServerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

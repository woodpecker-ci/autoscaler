// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"

	mock "github.com/stretchr/testify/mock"
)

// MockImageClient is an autogenerated mock type for the ImageClient type
type MockImageClient struct {
	mock.Mock
}

type MockImageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageClient) EXPECT() *MockImageClient_Expecter {
	return &MockImageClient_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx
func (_m *MockImageClient) All(ctx context.Context) ([]*hcloud.Image, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*hcloud.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*hcloud.Image, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*hcloud.Image); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageClient_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockImageClient_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockImageClient_Expecter) All(ctx interface{}) *MockImageClient_All_Call {
	return &MockImageClient_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockImageClient_All_Call) Run(run func(ctx context.Context)) *MockImageClient_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockImageClient_All_Call) Return(_a0 []*hcloud.Image, _a1 error) *MockImageClient_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageClient_All_Call) RunAndReturn(run func(context.Context) ([]*hcloud.Image, error)) *MockImageClient_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithOpts provides a mock function with given fields: ctx, opts
func (_m *MockImageClient) AllWithOpts(ctx context.Context, opts hcloud.ImageListOpts) ([]*hcloud.Image, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AllWithOpts")
	}

	var r0 []*hcloud.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ImageListOpts) ([]*hcloud.Image, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ImageListOpts) []*hcloud.Image); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.ImageListOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageClient_AllWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithOpts'
type MockImageClient_AllWithOpts_Call struct {
	*mock.Call
}

// AllWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ImageListOpts
func (_e *MockImageClient_Expecter) AllWithOpts(ctx interface{}, opts interface{}) *MockImageClient_AllWithOpts_Call {
	return &MockImageClient_AllWithOpts_Call{Call: _e.mock.On("AllWithOpts", ctx, opts)}
}

func (_c *MockImageClient_AllWithOpts_Call) Run(run func(ctx context.Context, opts hcloud.ImageListOpts)) *MockImageClient_AllWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.ImageListOpts))
	})
	return _c
}

func (_c *MockImageClient_AllWithOpts_Call) Return(_a0 []*hcloud.Image, _a1 error) *MockImageClient_AllWithOpts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageClient_AllWithOpts_Call) RunAndReturn(run func(context.Context, hcloud.ImageListOpts) ([]*hcloud.Image, error)) *MockImageClient_AllWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeProtection provides a mock function with given fields: ctx, image, opts
func (_m *MockImageClient) ChangeProtection(ctx context.Context, image *hcloud.Image, opts hcloud.ImageChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	ret := _m.Called(ctx, image, opts)

	if len(ret) == 0 {
		panic("no return value specified for ChangeProtection")
	}

	var r0 *hcloud.Action
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image, hcloud.ImageChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error)); ok {
		return rf(ctx, image, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image, hcloud.ImageChangeProtectionOpts) *hcloud.Action); ok {
		r0 = rf(ctx, image, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Image, hcloud.ImageChangeProtectionOpts) *hcloud.Response); ok {
		r1 = rf(ctx, image, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Image, hcloud.ImageChangeProtectionOpts) error); ok {
		r2 = rf(ctx, image, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_ChangeProtection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeProtection'
type MockImageClient_ChangeProtection_Call struct {
	*mock.Call
}

// ChangeProtection is a helper method to define mock.On call
//   - ctx context.Context
//   - image *hcloud.Image
//   - opts hcloud.ImageChangeProtectionOpts
func (_e *MockImageClient_Expecter) ChangeProtection(ctx interface{}, image interface{}, opts interface{}) *MockImageClient_ChangeProtection_Call {
	return &MockImageClient_ChangeProtection_Call{Call: _e.mock.On("ChangeProtection", ctx, image, opts)}
}

func (_c *MockImageClient_ChangeProtection_Call) Run(run func(ctx context.Context, image *hcloud.Image, opts hcloud.ImageChangeProtectionOpts)) *MockImageClient_ChangeProtection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Image), args[2].(hcloud.ImageChangeProtectionOpts))
	})
	return _c
}

func (_c *MockImageClient_ChangeProtection_Call) Return(_a0 *hcloud.Action, _a1 *hcloud.Response, _a2 error) *MockImageClient_ChangeProtection_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_ChangeProtection_Call) RunAndReturn(run func(context.Context, *hcloud.Image, hcloud.ImageChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error)) *MockImageClient_ChangeProtection_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, image
func (_m *MockImageClient) Delete(ctx context.Context, image *hcloud.Image) (*hcloud.Response, error) {
	ret := _m.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *hcloud.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image) (*hcloud.Response, error)); ok {
		return rf(ctx, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image) *hcloud.Response); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Image) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockImageClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - image *hcloud.Image
func (_e *MockImageClient_Expecter) Delete(ctx interface{}, image interface{}) *MockImageClient_Delete_Call {
	return &MockImageClient_Delete_Call{Call: _e.mock.On("Delete", ctx, image)}
}

func (_c *MockImageClient_Delete_Call) Run(run func(ctx context.Context, image *hcloud.Image)) *MockImageClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Image))
	})
	return _c
}

func (_c *MockImageClient_Delete_Call) Return(_a0 *hcloud.Response, _a1 error) *MockImageClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageClient_Delete_Call) RunAndReturn(run func(context.Context, *hcloud.Image) (*hcloud.Response, error)) *MockImageClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, idOrName
func (_m *MockImageClient) Get(ctx context.Context, idOrName string) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, idOrName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, idOrName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Image); ok {
		r0 = rf(ctx, idOrName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, idOrName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, idOrName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockImageClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
func (_e *MockImageClient_Expecter) Get(ctx interface{}, idOrName interface{}) *MockImageClient_Get_Call {
	return &MockImageClient_Get_Call{Call: _e.mock.On("Get", ctx, idOrName)}
}

func (_c *MockImageClient_Get_Call) Run(run func(ctx context.Context, idOrName string)) *MockImageClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageClient_Get_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_Get_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockImageClient) GetByID(ctx context.Context, id int64) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *hcloud.Image); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) *hcloud.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockImageClient_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockImageClient_Expecter) GetByID(ctx interface{}, id interface{}) *MockImageClient_GetByID_Call {
	return &MockImageClient_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockImageClient_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockImageClient_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockImageClient_GetByID_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_GetByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockImageClient) GetByName(ctx context.Context, name string) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *hcloud.Image); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockImageClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockImageClient_Expecter) GetByName(ctx interface{}, name interface{}) *MockImageClient_GetByName_Call {
	return &MockImageClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockImageClient_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockImageClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageClient_GetByName_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_GetByName_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_GetByName_Call) RunAndReturn(run func(context.Context, string) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameAndArchitecture provides a mock function with given fields: ctx, name, architecture
func (_m *MockImageClient) GetByNameAndArchitecture(ctx context.Context, name string, architecture hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, name, architecture)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameAndArchitecture")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, name, architecture)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, hcloud.Architecture) *hcloud.Image); ok {
		r0 = rf(ctx, name, architecture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, hcloud.Architecture) *hcloud.Response); ok {
		r1 = rf(ctx, name, architecture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, hcloud.Architecture) error); ok {
		r2 = rf(ctx, name, architecture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_GetByNameAndArchitecture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameAndArchitecture'
type MockImageClient_GetByNameAndArchitecture_Call struct {
	*mock.Call
}

// GetByNameAndArchitecture is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - architecture hcloud.Architecture
func (_e *MockImageClient_Expecter) GetByNameAndArchitecture(ctx interface{}, name interface{}, architecture interface{}) *MockImageClient_GetByNameAndArchitecture_Call {
	return &MockImageClient_GetByNameAndArchitecture_Call{Call: _e.mock.On("GetByNameAndArchitecture", ctx, name, architecture)}
}

func (_c *MockImageClient_GetByNameAndArchitecture_Call) Run(run func(ctx context.Context, name string, architecture hcloud.Architecture)) *MockImageClient_GetByNameAndArchitecture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(hcloud.Architecture))
	})
	return _c
}

func (_c *MockImageClient_GetByNameAndArchitecture_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_GetByNameAndArchitecture_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_GetByNameAndArchitecture_Call) RunAndReturn(run func(context.Context, string, hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_GetByNameAndArchitecture_Call {
	_c.Call.Return(run)
	return _c
}

// GetForArchitecture provides a mock function with given fields: ctx, idOrName, architecture
func (_m *MockImageClient) GetForArchitecture(ctx context.Context, idOrName string, architecture hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, idOrName, architecture)

	if len(ret) == 0 {
		panic("no return value specified for GetForArchitecture")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, idOrName, architecture)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, hcloud.Architecture) *hcloud.Image); ok {
		r0 = rf(ctx, idOrName, architecture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, hcloud.Architecture) *hcloud.Response); ok {
		r1 = rf(ctx, idOrName, architecture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, hcloud.Architecture) error); ok {
		r2 = rf(ctx, idOrName, architecture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_GetForArchitecture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForArchitecture'
type MockImageClient_GetForArchitecture_Call struct {
	*mock.Call
}

// GetForArchitecture is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
//   - architecture hcloud.Architecture
func (_e *MockImageClient_Expecter) GetForArchitecture(ctx interface{}, idOrName interface{}, architecture interface{}) *MockImageClient_GetForArchitecture_Call {
	return &MockImageClient_GetForArchitecture_Call{Call: _e.mock.On("GetForArchitecture", ctx, idOrName, architecture)}
}

func (_c *MockImageClient_GetForArchitecture_Call) Run(run func(ctx context.Context, idOrName string, architecture hcloud.Architecture)) *MockImageClient_GetForArchitecture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(hcloud.Architecture))
	})
	return _c
}

func (_c *MockImageClient_GetForArchitecture_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_GetForArchitecture_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_GetForArchitecture_Call) RunAndReturn(run func(context.Context, string, hcloud.Architecture) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_GetForArchitecture_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockImageClient) List(ctx context.Context, opts hcloud.ImageListOpts) ([]*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ImageListOpts) ([]*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hcloud.ImageListOpts) []*hcloud.Image); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hcloud.ImageListOpts) *hcloud.Response); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, hcloud.ImageListOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockImageClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ImageListOpts
func (_e *MockImageClient_Expecter) List(ctx interface{}, opts interface{}) *MockImageClient_List_Call {
	return &MockImageClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockImageClient_List_Call) Run(run func(ctx context.Context, opts hcloud.ImageListOpts)) *MockImageClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(hcloud.ImageListOpts))
	})
	return _c
}

func (_c *MockImageClient_List_Call) Return(_a0 []*hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_List_Call) RunAndReturn(run func(context.Context, hcloud.ImageListOpts) ([]*hcloud.Image, *hcloud.Response, error)) *MockImageClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, image, opts
func (_m *MockImageClient) Update(ctx context.Context, image *hcloud.Image, opts hcloud.ImageUpdateOpts) (*hcloud.Image, *hcloud.Response, error) {
	ret := _m.Called(ctx, image, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *hcloud.Image
	var r1 *hcloud.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image, hcloud.ImageUpdateOpts) (*hcloud.Image, *hcloud.Response, error)); ok {
		return rf(ctx, image, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *hcloud.Image, hcloud.ImageUpdateOpts) *hcloud.Image); ok {
		r0 = rf(ctx, image, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *hcloud.Image, hcloud.ImageUpdateOpts) *hcloud.Response); ok {
		r1 = rf(ctx, image, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *hcloud.Image, hcloud.ImageUpdateOpts) error); ok {
		r2 = rf(ctx, image, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImageClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockImageClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - image *hcloud.Image
//   - opts hcloud.ImageUpdateOpts
func (_e *MockImageClient_Expecter) Update(ctx interface{}, image interface{}, opts interface{}) *MockImageClient_Update_Call {
	return &MockImageClient_Update_Call{Call: _e.mock.On("Update", ctx, image, opts)}
}

func (_c *MockImageClient_Update_Call) Run(run func(ctx context.Context, image *hcloud.Image, opts hcloud.ImageUpdateOpts)) *MockImageClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*hcloud.Image), args[2].(hcloud.ImageUpdateOpts))
	})
	return _c
}

func (_c *MockImageClient_Update_Call) Return(_a0 *hcloud.Image, _a1 *hcloud.Response, _a2 error) *MockImageClient_Update_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImageClient_Update_Call) RunAndReturn(run func(context.Context, *hcloud.Image, hcloud.ImageUpdateOpts) (*hcloud.Image, *hcloud.Response, error)) *MockImageClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageClient creates a new instance of MockImageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageClient {
	mock := &MockImageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/hetznercloud/hcloud-go/v2/hcloud"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServerTypeClient creates a new instance of MockServerTypeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerTypeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerTypeClient {
	mock := &MockServerTypeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServerTypeClient is an autogenerated mock type for the ServerTypeClient type
type MockServerTypeClient struct {
	mock.Mock
}

type MockServerTypeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerTypeClient) EXPECT() *MockServerTypeClient_Expecter {
	return &MockServerTypeClient_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) All(ctx context.Context) ([]*hcloud.ServerType, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*hcloud.ServerType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*hcloud.ServerType, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*hcloud.ServerType); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServerTypeClient_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockServerTypeClient_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServerTypeClient_Expecter) All(ctx interface{}) *MockServerTypeClient_All_Call {
	return &MockServerTypeClient_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockServerTypeClient_All_Call) Run(run func(ctx context.Context)) *MockServerTypeClient_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_All_Call) Return(serverTypes []*hcloud.ServerType, err error) *MockServerTypeClient_All_Call {
	_c.Call.Return(serverTypes, err)
	return _c
}

func (_c *MockServerTypeClient_All_Call) RunAndReturn(run func(ctx context.Context) ([]*hcloud.ServerType, error)) *MockServerTypeClient_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithOpts provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) AllWithOpts(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AllWithOpts")
	}

	var r0 []*hcloud.ServerType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.ServerTypeListOpts) []*hcloud.ServerType); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, hcloud.ServerTypeListOpts) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServerTypeClient_AllWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithOpts'
type MockServerTypeClient_AllWithOpts_Call struct {
	*mock.Call
}

// AllWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ServerTypeListOpts
func (_e *MockServerTypeClient_Expecter) AllWithOpts(ctx interface{}, opts interface{}) *MockServerTypeClient_AllWithOpts_Call {
	return &MockServerTypeClient_AllWithOpts_Call{Call: _e.mock.On("AllWithOpts", ctx, opts)}
}

func (_c *MockServerTypeClient_AllWithOpts_Call) Run(run func(ctx context.Context, opts hcloud.ServerTypeListOpts)) *MockServerTypeClient_AllWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 hcloud.ServerTypeListOpts
		if args[1] != nil {
			arg1 = args[1].(hcloud.ServerTypeListOpts)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_AllWithOpts_Call) Return(serverTypes []*hcloud.ServerType, err error) *MockServerTypeClient_AllWithOpts_Call {
	_c.Call.Return(serverTypes, err)
	return _c
}

func (_c *MockServerTypeClient_AllWithOpts_Call) RunAndReturn(run func(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, error)) *MockServerTypeClient_AllWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) Get(ctx context.Context, idOrName string) (*hcloud.ServerType, *hcloud.Response, error) {
	ret := _mock.Called(ctx, idOrName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *hcloud.ServerType
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*hcloud.ServerType, *hcloud.Response, error)); ok {
		return returnFunc(ctx, idOrName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *hcloud.ServerType); ok {
		r0 = returnFunc(ctx, idOrName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = returnFunc(ctx, idOrName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, idOrName)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServerTypeClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServerTypeClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
func (_e *MockServerTypeClient_Expecter) Get(ctx interface{}, idOrName interface{}) *MockServerTypeClient_Get_Call {
	return &MockServerTypeClient_Get_Call{Call: _e.mock.On("Get", ctx, idOrName)}
}

func (_c *MockServerTypeClient_Get_Call) Run(run func(ctx context.Context, idOrName string)) *MockServerTypeClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_Get_Call) Return(serverType *hcloud.ServerType, response *hcloud.Response, err error) *MockServerTypeClient_Get_Call {
	_c.Call.Return(serverType, response, err)
	return _c
}

func (_c *MockServerTypeClient_Get_Call) RunAndReturn(run func(ctx context.Context, idOrName string) (*hcloud.ServerType, *hcloud.Response, error)) *MockServerTypeClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) GetByID(ctx context.Context, id int64) (*hcloud.ServerType, *hcloud.Response, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *hcloud.ServerType
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*hcloud.ServerType, *hcloud.Response, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *hcloud.ServerType); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) *hcloud.Response); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = returnFunc(ctx, id)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServerTypeClient_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockServerTypeClient_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockServerTypeClient_Expecter) GetByID(ctx interface{}, id interface{}) *MockServerTypeClient_GetByID_Call {
	return &MockServerTypeClient_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockServerTypeClient_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockServerTypeClient_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_GetByID_Call) Return(serverType *hcloud.ServerType, response *hcloud.Response, err error) *MockServerTypeClient_GetByID_Call {
	_c.Call.Return(serverType, response, err)
	return _c
}

func (_c *MockServerTypeClient_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*hcloud.ServerType, *hcloud.Response, error)) *MockServerTypeClient_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) GetByName(ctx context.Context, name string) (*hcloud.ServerType, *hcloud.Response, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *hcloud.ServerType
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*hcloud.ServerType, *hcloud.Response, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *hcloud.ServerType); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = returnFunc(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, name)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServerTypeClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockServerTypeClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServerTypeClient_Expecter) GetByName(ctx interface{}, name interface{}) *MockServerTypeClient_GetByName_Call {
	return &MockServerTypeClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockServerTypeClient_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockServerTypeClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_GetByName_Call) Return(serverType *hcloud.ServerType, response *hcloud.Response, err error) *MockServerTypeClient_GetByName_Call {
	_c.Call.Return(serverType, response, err)
	return _c
}

func (_c *MockServerTypeClient_GetByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*hcloud.ServerType, *hcloud.Response, error)) *MockServerTypeClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServerTypeClient
func (_mock *MockServerTypeClient) List(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, *hcloud.Response, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*hcloud.ServerType
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, *hcloud.Response, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.ServerTypeListOpts) []*hcloud.ServerType); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.ServerType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, hcloud.ServerTypeListOpts) *hcloud.Response); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, hcloud.ServerTypeListOpts) error); ok {
		r2 = returnFunc(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServerTypeClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServerTypeClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.ServerTypeListOpts
func (_e *MockServerTypeClient_Expecter) List(ctx interface{}, opts interface{}) *MockServerTypeClient_List_Call {
	return &MockServerTypeClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockServerTypeClient_List_Call) Run(run func(ctx context.Context, opts hcloud.ServerTypeListOpts)) *MockServerTypeClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 hcloud.ServerTypeListOpts
		if args[1] != nil {
			arg1 = args[1].(hcloud.ServerTypeListOpts)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerTypeClient_List_Call) Return(serverTypes []*hcloud.ServerType, response *hcloud.Response, err error) *MockServerTypeClient_List_Call {
	_c.Call.Return(serverTypes, response, err)
	return _c
}

func (_c *MockServerTypeClient_List_Call) RunAndReturn(run func(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, *hcloud.Response, error)) *MockServerTypeClient_List_Call {
	_c.Call.Return(run)
	return _c
}

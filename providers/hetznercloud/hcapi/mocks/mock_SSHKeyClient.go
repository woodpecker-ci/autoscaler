// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/hetznercloud/hcloud-go/v2/hcloud"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSSHKeyClient creates a new instance of MockSSHKeyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSHKeyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSHKeyClient {
	mock := &MockSSHKeyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSSHKeyClient is an autogenerated mock type for the SSHKeyClient type
type MockSSHKeyClient struct {
	mock.Mock
}

type MockSSHKeyClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSHKeyClient) EXPECT() *MockSSHKeyClient_Expecter {
	return &MockSSHKeyClient_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) All(ctx context.Context) ([]*hcloud.SSHKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*hcloud.SSHKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*hcloud.SSHKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*hcloud.SSHKey); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSHKeyClient_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockSSHKeyClient_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSSHKeyClient_Expecter) All(ctx interface{}) *MockSSHKeyClient_All_Call {
	return &MockSSHKeyClient_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockSSHKeyClient_All_Call) Run(run func(ctx context.Context)) *MockSSHKeyClient_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_All_Call) Return(sSHKeys []*hcloud.SSHKey, err error) *MockSSHKeyClient_All_Call {
	_c.Call.Return(sSHKeys, err)
	return _c
}

func (_c *MockSSHKeyClient_All_Call) RunAndReturn(run func(ctx context.Context) ([]*hcloud.SSHKey, error)) *MockSSHKeyClient_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithOpts provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) AllWithOpts(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AllWithOpts")
	}

	var r0 []*hcloud.SSHKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyListOpts) []*hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, hcloud.SSHKeyListOpts) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSHKeyClient_AllWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithOpts'
type MockSSHKeyClient_AllWithOpts_Call struct {
	*mock.Call
}

// AllWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.SSHKeyListOpts
func (_e *MockSSHKeyClient_Expecter) AllWithOpts(ctx interface{}, opts interface{}) *MockSSHKeyClient_AllWithOpts_Call {
	return &MockSSHKeyClient_AllWithOpts_Call{Call: _e.mock.On("AllWithOpts", ctx, opts)}
}

func (_c *MockSSHKeyClient_AllWithOpts_Call) Run(run func(ctx context.Context, opts hcloud.SSHKeyListOpts)) *MockSSHKeyClient_AllWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 hcloud.SSHKeyListOpts
		if args[1] != nil {
			arg1 = args[1].(hcloud.SSHKeyListOpts)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_AllWithOpts_Call) Return(sSHKeys []*hcloud.SSHKey, err error) *MockSSHKeyClient_AllWithOpts_Call {
	_c.Call.Return(sSHKeys, err)
	return _c
}

func (_c *MockSSHKeyClient_AllWithOpts_Call) RunAndReturn(run func(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, error)) *MockSSHKeyClient_AllWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) Create(ctx context.Context, opts hcloud.SSHKeyCreateOpts) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyCreateOpts) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyCreateOpts) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, hcloud.SSHKeyCreateOpts) *hcloud.Response); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, hcloud.SSHKeyCreateOpts) error); ok {
		r2 = returnFunc(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSSHKeyClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.SSHKeyCreateOpts
func (_e *MockSSHKeyClient_Expecter) Create(ctx interface{}, opts interface{}) *MockSSHKeyClient_Create_Call {
	return &MockSSHKeyClient_Create_Call{Call: _e.mock.On("Create", ctx, opts)}
}

func (_c *MockSSHKeyClient_Create_Call) Run(run func(ctx context.Context, opts hcloud.SSHKeyCreateOpts)) *MockSSHKeyClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 hcloud.SSHKeyCreateOpts
		if args[1] != nil {
			arg1 = args[1].(hcloud.SSHKeyCreateOpts)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_Create_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_Create_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_Create_Call) RunAndReturn(run func(ctx context.Context, opts hcloud.SSHKeyCreateOpts) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) Delete(ctx context.Context, sshKey *hcloud.SSHKey) (*hcloud.Response, error) {
	ret := _mock.Called(ctx, sshKey)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *hcloud.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *hcloud.SSHKey) (*hcloud.Response, error)); ok {
		return returnFunc(ctx, sshKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *hcloud.SSHKey) *hcloud.Response); ok {
		r0 = returnFunc(ctx, sshKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *hcloud.SSHKey) error); ok {
		r1 = returnFunc(ctx, sshKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSHKeyClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSSHKeyClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - sshKey *hcloud.SSHKey
func (_e *MockSSHKeyClient_Expecter) Delete(ctx interface{}, sshKey interface{}) *MockSSHKeyClient_Delete_Call {
	return &MockSSHKeyClient_Delete_Call{Call: _e.mock.On("Delete", ctx, sshKey)}
}

func (_c *MockSSHKeyClient_Delete_Call) Run(run func(ctx context.Context, sshKey *hcloud.SSHKey)) *MockSSHKeyClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *hcloud.SSHKey
		if args[1] != nil {
			arg1 = args[1].(*hcloud.SSHKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_Delete_Call) Return(response *hcloud.Response, err error) *MockSSHKeyClient_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSSHKeyClient_Delete_Call) RunAndReturn(run func(ctx context.Context, sshKey *hcloud.SSHKey) (*hcloud.Response, error)) *MockSSHKeyClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) Get(ctx context.Context, idOrName string) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, idOrName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, idOrName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, idOrName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = returnFunc(ctx, idOrName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, idOrName)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSSHKeyClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - idOrName string
func (_e *MockSSHKeyClient_Expecter) Get(ctx interface{}, idOrName interface{}) *MockSSHKeyClient_Get_Call {
	return &MockSSHKeyClient_Get_Call{Call: _e.mock.On("Get", ctx, idOrName)}
}

func (_c *MockSSHKeyClient_Get_Call) Run(run func(ctx context.Context, idOrName string)) *MockSSHKeyClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_Get_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_Get_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_Get_Call) RunAndReturn(run func(ctx context.Context, idOrName string) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFingerprint provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) GetByFingerprint(ctx context.Context, fingerprint string) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetByFingerprint")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, fingerprint)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = returnFunc(ctx, fingerprint)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, fingerprint)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_GetByFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFingerprint'
type MockSSHKeyClient_GetByFingerprint_Call struct {
	*mock.Call
}

// GetByFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - fingerprint string
func (_e *MockSSHKeyClient_Expecter) GetByFingerprint(ctx interface{}, fingerprint interface{}) *MockSSHKeyClient_GetByFingerprint_Call {
	return &MockSSHKeyClient_GetByFingerprint_Call{Call: _e.mock.On("GetByFingerprint", ctx, fingerprint)}
}

func (_c *MockSSHKeyClient_GetByFingerprint_Call) Run(run func(ctx context.Context, fingerprint string)) *MockSSHKeyClient_GetByFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_GetByFingerprint_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_GetByFingerprint_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_GetByFingerprint_Call) RunAndReturn(run func(ctx context.Context, fingerprint string) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_GetByFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) GetByID(ctx context.Context, id int64) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) *hcloud.Response); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = returnFunc(ctx, id)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockSSHKeyClient_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSSHKeyClient_Expecter) GetByID(ctx interface{}, id interface{}) *MockSSHKeyClient_GetByID_Call {
	return &MockSSHKeyClient_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockSSHKeyClient_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockSSHKeyClient_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_GetByID_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_GetByID_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) GetByName(ctx context.Context, name string) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *hcloud.Response); ok {
		r1 = returnFunc(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, name)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockSSHKeyClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSSHKeyClient_Expecter) GetByName(ctx interface{}, name interface{}) *MockSSHKeyClient_GetByName_Call {
	return &MockSSHKeyClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockSSHKeyClient_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockSSHKeyClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_GetByName_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_GetByName_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_GetByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) List(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, hcloud.SSHKeyListOpts) []*hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, hcloud.SSHKeyListOpts) *hcloud.Response); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, hcloud.SSHKeyListOpts) error); ok {
		r2 = returnFunc(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSSHKeyClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts hcloud.SSHKeyListOpts
func (_e *MockSSHKeyClient_Expecter) List(ctx interface{}, opts interface{}) *MockSSHKeyClient_List_Call {
	return &MockSSHKeyClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockSSHKeyClient_List_Call) Run(run func(ctx context.Context, opts hcloud.SSHKeyListOpts)) *MockSSHKeyClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 hcloud.SSHKeyListOpts
		if args[1] != nil {
			arg1 = args[1].(hcloud.SSHKeyListOpts)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_List_Call) Return(sSHKeys []*hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_List_Call {
	_c.Call.Return(sSHKeys, response, err)
	return _c
}

func (_c *MockSSHKeyClient_List_Call) RunAndReturn(run func(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSSHKeyClient
func (_mock *MockSSHKeyClient) Update(ctx context.Context, sshKey *hcloud.SSHKey, opts hcloud.SSHKeyUpdateOpts) (*hcloud.SSHKey, *hcloud.Response, error) {
	ret := _mock.Called(ctx, sshKey, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *hcloud.SSHKey
	var r1 *hcloud.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *hcloud.SSHKey, hcloud.SSHKeyUpdateOpts) (*hcloud.SSHKey, *hcloud.Response, error)); ok {
		return returnFunc(ctx, sshKey, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *hcloud.SSHKey, hcloud.SSHKeyUpdateOpts) *hcloud.SSHKey); ok {
		r0 = returnFunc(ctx, sshKey, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hcloud.SSHKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *hcloud.SSHKey, hcloud.SSHKeyUpdateOpts) *hcloud.Response); ok {
		r1 = returnFunc(ctx, sshKey, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*hcloud.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *hcloud.SSHKey, hcloud.SSHKeyUpdateOpts) error); ok {
		r2 = returnFunc(ctx, sshKey, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSSHKeyClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSSHKeyClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - sshKey *hcloud.SSHKey
//   - opts hcloud.SSHKeyUpdateOpts
func (_e *MockSSHKeyClient_Expecter) Update(ctx interface{}, sshKey interface{}, opts interface{}) *MockSSHKeyClient_Update_Call {
	return &MockSSHKeyClient_Update_Call{Call: _e.mock.On("Update", ctx, sshKey, opts)}
}

func (_c *MockSSHKeyClient_Update_Call) Run(run func(ctx context.Context, sshKey *hcloud.SSHKey, opts hcloud.SSHKeyUpdateOpts)) *MockSSHKeyClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *hcloud.SSHKey
		if args[1] != nil {
			arg1 = args[1].(*hcloud.SSHKey)
		}
		var arg2 hcloud.SSHKeyUpdateOpts
		if args[2] != nil {
			arg2 = args[2].(hcloud.SSHKeyUpdateOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSSHKeyClient_Update_Call) Return(sSHKey *hcloud.SSHKey, response *hcloud.Response, err error) *MockSSHKeyClient_Update_Call {
	_c.Call.Return(sSHKey, response, err)
	return _c
}

func (_c *MockSSHKeyClient_Update_Call) RunAndReturn(run func(ctx context.Context, sshKey *hcloud.SSHKey, opts hcloud.SSHKeyUpdateOpts) (*hcloud.SSHKey, *hcloud.Response, error)) *MockSSHKeyClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
